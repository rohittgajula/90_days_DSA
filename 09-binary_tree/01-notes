REPRESENTATION OF TREE IN ARRAY

        1
      /   \
     2     3                - This is a perfect binary tree, if one branch is missing it is called as complete binary tree
    / \   / \
   4   5 6   7


1. The root node is at index 0 (or 1 if 1-based indexing is used)

2. For a node at index i, its children are at

    - Left child : 2i + 1(0-based) or 2i(1-based)
    - right child : 2i + 2(0-based) or 2i + 1(1-based)

3. For a child node at index i, its parent can be found at

    - Parent : [(i-1)/2] (0-based) or [i/2] (i-based)

4. Array representation
    - o-based : [1,2,3,4,5,6,7]
    - 1-based : [None,1,2,3,4,5,6,7]



DEPTH FIRST SEARCH ( DFS )( Stack for implementation )( recursion for imp )

        1
      /   \
     2     3
    / \   / \
   4   5 6   7

 - Implemented by using Stack

How it works?
    1. Start from the root (or any node, in case of a graph).
    2. Explore one child completely before moving to the next child.
    3. Use a stack (explicitly or implicitly via recursion) to keep track of the nodes.

Types of DFS ( 3-types )
    1. Pre-order (Root, Left, Right)    -->     1 → 2 → 4 → 5 → 3 → 6 → 7
    2. In-order (Left, Root, Right)     -->     4 → 2 → 5 → 1 → 6 → 3 → 7
    3. Post-order (Left, Right, Root)   -->     4 → 5 → 2 → 6 → 7 → 3 → 1


BREADTH FIRST SEARCH / LEVEL ORDER TRAVERSAL ( BFS ) ( Queue's for implementation )

        1
      /   \
     2     3
    / \   / \
   4   5 6   7

   - Implemented by using queue's

How it works?
    1. Start from the root (or any node, in case of a graph).
    2. Visit all neighboring nodes at the current depth (level) before moving to the next depth.
    3. BFS uses a queue (FIFO) to keep track of the nodes to visit.

There are no types, it follows level order      -->     1 → 2 → 3 → 4 → 5 → 6 → 7


BINARY SEARCH TREE - We do In-order methodology.

A Binary Search Tree (BST) is a binary tree with the following properties:
    - Left Subtree: Contains only nodes with values less than the parent node.
    - Right Subtree: Contains only nodes with values greater than the parent node.
    - No Duplicate Nodes: Each node has a unique value.

        50
       /  \
     30    70
    /  \  /  \
  20   40 60  80

    In-order (left, root, right)    -->     20 → 30 → 40 → 50 → 60 → 70 → 80    ( the elements are ordered )